<div class="chat-opener position-fixed">
    <button class="btn btn-primary rounded-circle p-3 shadow-lg">
        <img src="/static/image/chat2.0.png" alt="Chat" width="30">
    </button>
</div>

<div class="chat-container position-fixed shadow-lg">
    <div class="chat-wrapper bg-white rounded-3">
        <div class="chat-header bg-primary text-white p-3 rounded-top-3">
            <div class="d-flex align-items-center">
                <div class="chat-avatar bg-white rounded-circle p-2 me-3">
                    <img src="/static/image/icon-park_robot.png" alt="Bot" width="30" height="30">
                </div>
                <div>
                    <h6 class="mb-0">UNI ASSIST</h6>
                    <small class="opacity-75">Online</small>
                </div>
                <button class="btn-close btn-close-white ms-auto" id="close-chat"></button>
            </div>
        </div>

        <div class="chat-messages p-3" id="chat-box">
            <div class="bot-message mb-3">
                <div class="d-flex">
                    <div class="chat-avatar bg-light rounded-circle p-1 me-2">
                        <img src="/static/image/icon-park_robot.png" alt="Bot" width="24" height="24">
                    </div>
                    <div class="message-content">
                        <div class="bg-light rounded-3 p-2">
                            <p class="mb-0">Hello! ðŸ‘‹ I'm your UNI ASSIST bot. How can I help you today?</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="chat-actions p-3 border-top">
            <div class="d-flex flex-wrap gap-2" id="options">
                <button class="btn btn-outline-primary btn-sm option-btn" data-value="courses">Courses</button>
                <button class="btn btn-outline-primary btn-sm option-btn" data-value="OpenDays">Open Days</button>
                <button class="btn btn-outline-primary btn-sm option-btn" data-value="ContactUS">Contact Us</button>
                <button class="btn btn-outline-primary btn-sm option-btn" data-value="Howtoapply">How to Apply?</button>
            </div>
        </div>
    </div>
</div>

<style>
.chat-container {
    bottom: 2rem;
    right: 2rem;
    width: 350px;
    display: none;
    z-index: 1040;
}

.chat-wrapper {
    height: 500px;
    display: flex;
    flex-direction: column;
}

.chat-messages {
    flex-grow: 1;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: #dee2e6 transparent;
}

.chat-messages::-webkit-scrollbar {
    width: 6px;
}

.chat-messages::-webkit-scrollbar-track {
    background: transparent;
}

.chat-messages::-webkit-scrollbar-thumb {
    background-color: #dee2e6;
    border-radius: 3px;
}

.message-content {
    max-width: 80%;
}

.user-message .message-content {
    margin-left: auto;
}

.user-message .bg-light {
    background-color: #007bff !important;
    color: white;
}

.typing-indicator {
    display: flex;
    gap: 0.3rem;
    padding: 0.5rem;
    width: fit-content;
}

.typing-dot {
    width: 6px;
    height: 6px;
    background: #6c757d;
    border-radius: 50%;
    animation: typing 1s infinite ease-in-out;
}

.typing-dot:nth-child(1) { animation-delay: 0.2s; }
.typing-dot:nth-child(2) { animation-delay: 0.3s; }
.typing-dot:nth-child(3) { animation-delay: 0.4s; }

@keyframes typing {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-4px); }
}

@media (max-width: 576px) {
    .chat-container {
        right: 1rem;
        left: 1rem;
        width: auto;
    }
}
</style>

<script>
document.addEventListener("DOMContentLoaded", function () {
    const chatOpener = document.querySelector(".chat-opener");
    const chatContainer = document.querySelector(".chat-container");
    const chatBox = document.querySelector("#chat-box");
    const closeChat = document.querySelector("#close-chat");
    const optionsContainer = document.querySelector("#options");

    function showTypingIndicator() {
        const typingDiv = document.createElement("div");
        typingDiv.className = "bot-message mb-3 typing-indicator";
        typingDiv.innerHTML = `
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
        `;
        chatBox.appendChild(typingDiv);
        chatBox.scrollTop = chatBox.scrollHeight;
        return typingDiv;
    }

    function addMessage(content, isUser = false) {
        const messageDiv = document.createElement("div");
        messageDiv.className = `${isUser ? 'user-message' : 'bot-message'} mb-3`;
        messageDiv.innerHTML = `
            <div class="d-flex">
                ${!isUser ? `
                    <div class="chat-avatar bg-light rounded-circle p-1 me-2">
                        <img src="/static/image/icon-park_robot.png" alt="Bot" width="24" height="24">
                    </div>
                ` : ''}
                <div class="message-content">
                    <div class="bg-light rounded-3 p-2">
                        ${content}
                    </div>
                </div>
            </div>
        `;
        chatBox.appendChild(messageDiv);
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    function updateOptions(buttons) {
        optionsContainer.innerHTML = buttons.map(btn => 
            `<button class="btn btn-outline-primary btn-sm option-btn" data-value="${btn}">${btn}</button>`
        ).join('');
    }

    async function handleButtonClick(value, buttonText) {
        chatContainer.style.display = "block";
        addMessage(buttonText, true);
        
        const typingIndicator = showTypingIndicator();
        
        try {
            const response = await fetch('/data');
            const data = await response.json();
            
            setTimeout(() => {
                typingIndicator.remove();
                
                if (data[value]) {
                    if (typeof data[value] === 'string') {
                        if (value === "10universities" || value === "10art") {
                            const universities = data[value].split(", ");
                            const listContent = `
                                <ul class="list-unstyled mb-0">
                                    ${universities.map(uni => `<li>â€¢ ${uni}</li>`).join('')}
                                </ul>
                            `;
                            addMessage(listContent);
                        } else {
                            addMessage(`<p class="mb-0">${data[value]}</p>`);
                        }
                    } else if (data[value].buttons && data[value].messages) {
                        const firstMessage = data[value].messages[0];
                        addMessage(`<p class="mb-0">${firstMessage}</p>`);
                        
                        const newButtons = data[value].buttons;
                        updateOptions(newButtons);
                        
                        document.querySelectorAll('.option-btn').forEach((btn, index) => {
                            btn.addEventListener('click', function() {
                                const btnValue = this.getAttribute('data-value');
                                const btnText = this.textContent;
                                
                                if (data[value].messages[index]) {
                                    addMessage(btnText, true);
                                    setTimeout(() => {
                                        addMessage(`<p class="mb-0">${data[value].messages[index]}</p>`);
                                    }, 500);
                                }
                            });
                        });
                    }
                } else {
                    for (let key in data) {
                        if (data[key].buttons && data[key].buttons.includes(value)) {
                            const index = data[key].buttons.indexOf(value);
                            addMessage(`<p class="mb-0">${data[key].messages[index]}</p>`);
                            break;
                        }
                    }
                }
            }, 1000);
        } catch (error) {
            console.error('Error:', error);
            typingIndicator.remove();
            addMessage('<p class="mb-0">Sorry, there was an error processing your request.</p>');
        }
    }

    document.addEventListener('click', function(event) {
        const button = event.target.closest('.option-btn');
        if (button) {
            event.stopPropagation();
            handleButtonClick(button.dataset.value, button.textContent);
        }
    });

    chatOpener.addEventListener("click", () => chatContainer.style.display = "block");
    closeChat.addEventListener("click", () => chatContainer.style.display = "none");

    document.addEventListener("click", (event) => {
        if (!chatContainer.contains(event.target) && 
            !chatOpener.contains(event.target) &&
            !event.target.classList.contains('option-btn')) {
            chatContainer.style.display = "none";
        }
    });
});
</script>
